<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="955" minHeight="600" 
		       backgroundColor="white">
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<fx:XML id="xmlDP">
			<root>
				<node label="The quick brown fox jumped over the lazy dog." />
				<node label="Lorem ipsum (disabled)." enabled="false" />
				<node type="separator" />
				<node label="parent">
					<node label="child1" />
				</node>
				<node label="parent (disabled)" enabled="false">
					<node label="child1" />
					<node label="child2" />
					<node label="child3" />
				</node>
				<node type="separator" />
				<node label="type=check" id="ch" type="check" toggled="true" />
				<node label="type=check" id="ch" type="check" toggled="true" enabled="false" />
				<node type="separator" />
				<node label="1) type=radio" type="radio" groupName="radioGroup" toggled="true"  />
				<node label="2) type=radio" type="radio" groupName="radioGroup" />
				<node label="3) type=radio" type="radio" groupName="radioGroup" />
				<node label="4) type=radio" type="radio" groupName="radioGroup" enabled="true" />
				<node label="5) type=radio" type="radio" groupName="radioGroup" toggled="true">
					<node label="child1" type="check" />
					<node label="child2" type="check" />
					<node label="child3" type="check" toggled="true" />
				</node>
			</root>
		</fx:XML>
		
		<fx:XML id="xmlDP2">
			<root>
				<node id='0' label="All native formats" type="radio" groupName="radioGroup" p="1" haveChild="n" toggled="false"/>
				<node id='1' label="Only images.." type="radio" groupName="radioGroup" p="1" haveChild="y" toggled="false">
					<node id='2' label="BMP format" type="check" p="0" toggled="false"/>
					<node id='3' label="JPEG format" type="check" p="0" toggled="false"/>
					<node id='4' label="GIF format" type="check" p="0" toggled="false"/>
					<node id='5' label="PNG format" type="check" p="0" toggled="false"/>
				</node>
				<node id='6' label="Only PDF.." type="radio" groupName="radioGroup" p="1" haveChild="y" toggled="false">
					<node id='7' label="PDF" type="check" p="0" toggled="false"/>
					<node id='8' label="PDF/A (searchable)" type="check" p="0" toggled="false"/>
					<node id='9' label="PDF/IHQC (compressed)" type="check" p="0" toggled="false"/>
				</node>
				<node id='10' label="Only MS Office.." type="radio" groupName="radioGroup" p="1" haveChild="y" toggled="false">
					<node id='11' label="MS Access" type="check" p="0" toggled="false"/>
					<node id='12' label="MS Excel" type="check" p="0" toggled="false"/>
					<node id='13' label="MS PowerPoint" type="check" p="0" toggled="false"/>
				</node>
			</root>
		</fx:XML>
		
	</fx:Declarations>
	

	<fx:Script>
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.controls.*;
			import mx.controls.Menu;
			import mx.controls.menuClasses.MenuListData;
			import mx.events.*;
		
		private var menu:Menu;
		private var myMenu:Menu;
		
		private function init():void {
			menu = new Menu();
			menu.labelField = "@label";
			menu.dataProvider = xmlDP;
			menu.showRoot = false;
			menu.width = popUpButton.width;
			popUpButton.popUp = menu;
		}
		
		// Initialize the Menu control, 
		// and specify it as the pop up object
		// of the PopUpButton control. 
		private function initMenu():void {
			myMenu = new Menu();
			myMenu.labelField = "@label";
			myMenu.dataProvider = xmlDP2;
			myMenu.showRoot = false;
			myMenu.addEventListener("itemClick", itemClickHandler);
			//myMenu.addEventListener("change", menuChange);
			
			myMenu.width = popB.width;
			popB.popUp = myMenu;
			
			//click="myMenuBar_clickHandler(event)" itemClick="myMenuBar_itemClickHandler(event)"
			
		}
			
		// Define the event listener for the Menu control's change event. 
		private function menuChange(event:MenuEvent):void {
			
			var menuXML:XML = XML(event.item);
			var selectAncestorIDStr:String = menuXML.@id.toString();
			clearToggle(selectAncestorIDStr);
			
			var x:XMLList = xmlDP2.node.(@id == menuXML.@id); //get all child of node ancestorID
			x.@toggled = true;
			
			var label:String = event.label;        
			popTypeB.text=String("Moved to " + label);
			popB.label = "Put in: " + label;
			popB.close();
		}
			
		// Define the event listener for the Menu control's change event. 
		private function itemClickHandler(event:MenuEvent):void {
			var label:String = event.label;
			travelInXMLList(XML(event.item));
			popTypeB.text=String("Moved to " + label);
			popB.label = "Put in: " + label;
			popB.close();
		}
			
			
		private function travelInXMLList(p:XML):void {
			var ancestorID:int = 0; //parent id of current selected item
			var selectid:String = p.@id ;
			var currentItemIsToggle:Boolean = p.@toggled;
			
			//var node:XMLList = xmlDP2.node.node.(@id == selectid );
			
			//find ancestorID
			for each( var nodelist:XML in xmlDP2.elements("*") ) { //nodelist  get all xml
				if ( nodelist.node.(@id == selectid).@id == selectid ) {
						ancestorID = nodelist.@id.toString(); //ancestorID is parent id of selected child
					break;
				}
			}
			
			//find selected childs in ancestor
			var ancestorNode:XMLList = xmlDP2.node.(@id == ancestorID);
			var listChecked:Boolean = false;
			for each( var nodelist:XML in ancestorNode.elements("*") ) { //nodelist get all xml in ancestorNodeXML
				if ( nodelist.@toggled == true ) {
					listChecked = true;
					break;
				}
			}
			
			//set toggle to current parent
			var x:XMLList = xmlDP2.node.(@id == ancestorID); //get all child of node ancestorID
			var ancestorIDStr:String = ancestorID.toString();
			
			if (listChecked) {
				//clear all
				clearToggle(ancestorIDStr);
				x.@toggled = true;
			} else {
				//clear all
				clearToggle(null);
				x.@toggled = false;
			}
			
			
			
			//if ( currentItemIsToggle ) {
			//	ancestorID = nodelist.@id.toString(); //ancestorID is parent id of selected child
			//} else {
			//	break;
			//}
			
			//Check 
			
			
			//set toggle to current parent
			//var x:XMLList = xmlDP2.node.(@id == ancestorID); //get all child of node ancestorID
			//x.@toggled = true; 
			
			//clear all before parent toggle
			
			/* Alert.show(
				"ancestorID : " + ancestorID
				+ "selectid : " + selectid
			); */
		}
			
		private function clearToggle(ancestorIDStr:String):void {
			
			if ( ancestorIDStr != null ) {
				for each( var nodelist:XML in xmlDP2.elements("*") ) { //nodelist  get all xml
					if (nodelist.@id.toString() != ancestorIDStr) {
						if (nodelist.@haveChild == "y") {
							//find child node
							var ancestorNode:XMLList = xmlDP2.node.(@id == nodelist.@id);
							for each( var childNodelist:XML in ancestorNode.elements("*") ) { //nodelist get all xml in ancestorNodeXML
								childNodelist.@toggled = false;
							}
							nodelist.@toggled = false;
							
						} else {
							nodelist.@toggled = false;
						}
					}
				}
			
			} else {
				for each( var nodelist:XML in xmlDP2.elements("*") ) { //nodelist  get all xml
					if (nodelist.@haveChild == "y") {
						//find child node
						var ancestorNode:XMLList = xmlDP2.node.(@id == nodelist.@id);
						for each( var childNodelist:XML in ancestorNode.elements("*") ) { //nodelist get all xml in ancestorNodeXML
							childNodelist.@toggled = false;
						}
						nodelist.@toggled = false;
						
					} else {
						nodelist.@toggled = false;
					}
				}
			}
		}
			
			
		]]>
	</fx:Script>
	
	
	
	<mx:HBox width="100%">
		<mx:VBox width="25%">
			<mx:PopUpButton id="popUpButton"
							label="Please select an item"
							openAlways="true"
							creationComplete="init();"
							/>
		</mx:VBox>
		<mx:VBox width="15%"/>
		<mx:VBox width="60%">
			<mx:Label text="Main button mimics the last selected menuItem."/>
			<!--<mx:PopUpButton id="popB" label="Edit" width="135" creationComplete="initMenu();"/>-->
			<mx:PopUpButton id="popB" label="Edit" width="160" creationComplete="initMenu();" openAlways="true"/>
			<mx:Spacer height="50"/>
			<mx:TextInput id="popTypeB"/>
		</mx:VBox>
	</mx:HBox>
	
	
</s:Application>
